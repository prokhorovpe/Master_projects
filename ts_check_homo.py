import pandas as pd
import numpy as np
import pickle
import matplotlib.pyplot as plt
from scipy import stats
from statsmodels.tsa.seasonal import seasonal_decompose
from config import PROCESSED_DATA_PATH, TEST_START_DATE

def analyze_service_time_series():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –ø–µ—Ä–∏–æ–¥–µ –∏ –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç–∏."""
    print("üîç –ê–Ω–∞–ª–∏–∑ service_time_series.pkl...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    with open(PROCESSED_DATA_PATH, 'rb') as f:
        service_time_series = pickle.load(f)
    
    test_start = pd.to_datetime(TEST_START_DATE)
    test_end = test_start + pd.offsets.MonthEnd(0)  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –∞–≤–≥—É—Å—Ç–∞ 2025
    train_start = pd.to_datetime('2024-01-01')  # –ù–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    train_end = test_start - pd.Timedelta(days=1)  # –ö–æ–Ω–µ—Ü —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞

    print(f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–µ—Ä–∏–æ–¥: —Å {train_start.date()} –ø–æ {train_end.date()}")
    print(f"–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥: —Å {test_start.date()} –ø–æ {test_end.date()}")
    print("=" * 80)

    for modality, ts in service_time_series.items():
        print(f"\nüìä –ú–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å: {modality}")
        
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if isinstance(ts, pd.Series):
            df = ts.reset_index()
            df.columns = ['ds', 'y']
        elif isinstance(ts, pd.DataFrame):
            if len(ts.columns) >= 2:
                df = ts.iloc[:, :2].copy()
                df.columns = ['ds', 'y']
            else:
                df = ts.reset_index()
                df.columns = ['ds', 'y']
        else:
            print(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(ts)}")
            continue

        df['ds'] = pd.to_datetime(df['ds'])
        df['y'] = pd.to_numeric(df['y'], errors='coerce').clip(lower=0)
        df = df.dropna(subset=['y']).reset_index(drop=True)

        # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø–µ—Ä–∏–æ–¥—ã
        train_df = df[(df['ds'] >= train_start) & (df['ds'] <= train_end)].copy()
        test_df = df[(df['ds'] >= test_start) & (df['ds'] <= test_end)].copy()

        # –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print(f"   –í—Å–µ–≥–æ –¥–Ω–µ–π –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –ø–µ—Ä–∏–æ–¥–µ: {len(test_df)}")
        print(f"   –°—É–º–º–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –ø–µ—Ä–∏–æ–¥–µ: {test_df['y'].sum():,}")
        print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {test_df['y'].min():,}")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {test_df['y'].max():,}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏: {(test_df['y'] == 0).sum()}")

        # –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç–∏
        if len(train_df) > 0 and len(test_df) > 0:
            print("\n   üìà –ê–ù–ê–õ–ò–ó –û–î–ù–û–†–û–î–ù–û–°–¢–ò –î–ê–ù–ù–´–•:")
            print("   " + "-" * 50)
            
            # 1. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            train_mean = train_df['y'].mean()
            test_mean = test_df['y'].mean()
            mean_diff_pct = ((test_mean - train_mean) / train_mean) * 100
            print(f"   –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
            print(f"   - –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {train_mean:.2f}")
            print(f"   - –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥: {test_mean:.2f}")
            print(f"   - –†–∞–∑–Ω–∏—Ü–∞: {mean_diff_pct:+.2f}%")
            
            # 2. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
            train_std = train_df['y'].std()
            test_std = test_df['y'].std()
            std_diff_pct = ((test_std - train_std) / train_std) * 100
            print(f"   –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:")
            print(f"   - –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {train_std:.2f}")
            print(f"   - –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥: {test_std:.2f}")
            print(f"   - –†–∞–∑–Ω–∏—Ü–∞: {std_diff_pct:+.2f}%")
            
            # 3. –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç (t-test –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö)
            if len(train_df) >= 30 and len(test_df) >= 30:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è t-test
                t_stat, p_value = stats.ttest_ind(train_df['y'], test_df['y'])
                print(f"   T-test (p-value): {p_value:.4f}")
                if p_value < 0.05:
                    print("   ‚ö†Ô∏è  –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–æ–µ —Ä–∞–∑–ª–∏—á–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö!")
                else:
                    print("   ‚úÖ –ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–æ–≥–æ —Ä–∞–∑–ª–∏—á–∏—è —Å—Ä–µ–¥–Ω–∏—Ö")
            
            # 4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞–Ω
            train_median = train_df['y'].median()
            test_median = test_df['y'].median()
            median_diff_pct = ((test_median - train_median) / train_median) * 100
            print(f"   –ú–µ–¥–∏–∞–Ω–∞:")
            print(f"   - –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {train_median:.2f}")
            print(f"   - –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥: {test_median:.2f}")
            print(f"   - –†–∞–∑–Ω–∏—Ü–∞: {median_diff_pct:+.2f}%")
            
            # 5. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏
            train_cv = (train_std / train_mean) * 100 if train_mean > 0 else 0
            test_cv = (test_std / test_mean) * 100 if test_mean > 0 else 0
            print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏:")
            print(f"   - –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {train_cv:.2f}%")
            print(f"   - –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥: {test_cv:.2f}%")
            
            # 6. –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏)
            if len(train_df) > 7 and len(test_df) > 7:
                train_df['day_of_week'] = train_df['ds'].dt.dayofweek
                test_df['day_of_week'] = test_df['ds'].dt.dayofweek
                
                train_dow_means = train_df.groupby('day_of_week')['y'].mean()
                test_dow_means = test_df.groupby('day_of_week')['y'].mean()
                
                dow_correlation = train_dow_means.corr(test_dow_means)
                print(f"   –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏: {dow_correlation:.3f}")

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        try:
            plt.figure(figsize=(12, 8))
            
            # –ü–æ–ª–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥
            plt.subplot(2, 1, 1)
            plt.plot(df['ds'], df['y'], label='–ü–æ–ª–Ω—ã–π —Ä—è–¥', alpha=0.7)
            plt.axvline(x=train_end, color='red', linestyle='--', label='–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞')
            plt.title(f'–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥: {modality}')
            plt.xlabel('–î–∞—Ç–∞')
            plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π')
            plt.legend()
            plt.grid(True, alpha=0.3)
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
            plt.subplot(2, 1, 2)
            plt.hist(train_df['y'], bins=30, alpha=0.7, label='–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–µ—Ä–∏–æ–¥', density=True)
            plt.hist(test_df['y'], bins=30, alpha=0.7, label='–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥', density=True)
            plt.title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π')
            plt.xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π')
            plt.ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å')
            plt.legend()
            plt.grid(True, alpha=0.3)
            
            plt.tight_layout()
            plt.savefig(f'{modality}_analysis.png', dpi=300, bbox_inches='tight')
            plt.close()
            
            print(f"   üìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: {modality}_analysis.png")
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")

    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω.")

if __name__ == "__main__":
    analyze_service_time_series()