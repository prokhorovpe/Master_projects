import pandas as pd
import pickle
from config import PROCESSED_DATA_PATH, TEST_START_DATE

def analyze_service_time_series():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –ø–µ—Ä–∏–æ–¥–µ."""
    print("üîç –ê–Ω–∞–ª–∏–∑ service_time_series.pkl...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    with open(PROCESSED_DATA_PATH, 'rb') as f:
        service_time_series = pickle.load(f)
    
    test_start = pd.to_datetime(TEST_START_DATE)
    test_end = test_start + pd.offsets.MonthEnd(0)  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –∞–≤–≥—É—Å—Ç–∞ 2025

    print(f"–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥: —Å {test_start.date()} –ø–æ {test_end.date()}")
    print("=" * 80)

    for modality, ts in service_time_series.items():
        print(f"\nüìä –ú–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å: {modality}")
        
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –≤—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ ['ds', 'y']
        if isinstance(ts, pd.Series):
            df = ts.reset_index()
            df.columns = ['ds', 'y']
        elif isinstance(ts, pd.DataFrame):
            if len(ts.columns) >= 2:
                df = ts.iloc[:, :2].copy()
                df.columns = ['ds', 'y']
            else:
                df = ts.reset_index()
                df.columns = ['ds', 'y']
        else:
            print(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(ts)}")
            continue

        df['ds'] = pd.to_datetime(df['ds'])
        df['y'] = pd.to_numeric(df['y'], errors='coerce').clip(lower=0)
        df = df.dropna(subset=['y']).reset_index(drop=True)

        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥
        test_df = df[(df['ds'] >= test_start) & (df['ds'] <= test_end)].copy()

        print(f"   –í—Å–µ–≥–æ –¥–Ω–µ–π –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –ø–µ—Ä–∏–æ–¥–µ: {len(test_df)}")
        print(f"   –°—É–º–º–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –ø–µ—Ä–∏–æ–¥–µ: {test_df['y'].sum():,}")
        print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {test_df['y'].min():,}")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {test_df['y'].max():,}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏: {(test_df['y'] == 0).sum()}")

        # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        if len(test_df) > 0:
            print("   –ü–µ—Ä–≤—ã–µ 5 –¥–Ω–µ–π —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞:")
            print(test_df.head().to_string(index=False))

    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω.")

if __name__ == "__main__":
    analyze_service_time_series()